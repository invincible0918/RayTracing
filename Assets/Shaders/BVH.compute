#pragma kernel CalculateAABB
#pragma kernel CalculateMortonCode

// 1. 构造 AABB
struct AABB
{
    float3 min;
    float3 max;
};

ByteAddressBuffer indexBuffer;
ByteAddressBuffer vertexBuffer;
RWStructuredBuffer<AABB> aabbBuffer;
RWStructuredBuffer<uint> triangleIndexBuffer;

float3 LoadVertex(uint index)
{
	uint pi = index * 3 * 4; // index * 3[position.xyz] * 4[bytes]

	float3 position = asfloat(vertexBuffer.Load3(pi));
	return position;
}

[numthreads(256, 1, 1)]
void CalculateAABB(uint id : SV_DispatchThreadID)
{
    // 读取顶点索引
	uint3 triIndex = indexBuffer.Load3(id * 3 * 4); // id * 3[triangle vertices] * 4[bytes]

    // 读取原始position
	float3 p0 = LoadVertex(triIndex.x);
	float3 p1 = LoadVertex(triIndex.y);
	float3 p2 = LoadVertex(triIndex.z);

	AABB aabb = aabbBuffer[id];

	aabb.min = float3(
		min(min(p0.x, p1.x), p2.x),
		min(min(p0.y, p1.y), p2.y),
		min(min(p0.z, p1.z), p2.z)
		);
	aabb.max = float3(
		max(max(p0.x, p1.x), p2.x),
		max(max(p0.y, p1.y), p2.y),
		max(max(p0.z, p1.z), p2.z)
		);

	aabbBuffer[id] = aabb;
	triangleIndexBuffer[id] = id;
}

// 2. 计算 MortonCode
float3 encompassingAABBMin;
float3 encompassingAABBMax;
RWStructuredBuffer<uint> mortonCodeBuffer;

uint ExpandBits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

uint MortonCode(float3 v)
{
    v.x = min(max(v.x * 1024.0f, 0.0f), 1023.0f);
    v.y = min(max(v.y * 1024.0f, 0.0f), 1023.0f);
    v.z = min(max(v.z * 1024.0f, 0.0f), 1023.0f);
    uint xx = ExpandBits((uint) v.x);
    uint yy = ExpandBits((uint) v.y);
    uint zz = ExpandBits((uint) v.z);
    return (xx * 4 + yy * 2 + zz);
}

[numthreads(256, 1, 1)]
void CalculateMortonCode(uint id : SV_DispatchThreadID)
{
	AABB aabb = aabbBuffer[id];

	float3 center = (aabb.min + aabb.max) * 0.5;
	float3 normalized = (center - encompassingAABBMin) / (encompassingAABBMax - encompassingAABBMin);

	mortonCodeBuffer[id] = MortonCode(normalized);
}
