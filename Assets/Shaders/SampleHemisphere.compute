// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "./Assets/Shaders/RayTracing/Header.cginc"

RWStructuredBuffer<float3> directions;

const float3 normal;
int samplingType;

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 Tangent2World(float theta, float phi, float3 direction)
{
    float3 localSpaceDir = float3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
    return normalize(mul(localSpaceDir, GetTangentSpace(direction)));
}

float3 HemisphereSampling(float3 normal)
{
    float theta = 0.5 * PI * Rand();
    float phi = 2.0 * PI * Rand();

    return Tangent2World(theta, phi, normal);
}

float3 UniformSampling(float3 normal)
{
    float theta = acos(1 - Rand());
    float phi = 2.0 * PI * Rand();

    return Tangent2World(theta, phi, normal);
}

float3 CosineWeightedSampling(float3 normal)
{
    float theta = acos(sqrt(1 - Rand()));
    float phi = 2.0 * PI * Rand();

    return Tangent2World(theta, phi, normal);
}

[numthreads(8, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _pixel = id.xy;

    SetSeed();

    float3 direction = 0;

    if (samplingType == 0)
        direction = HemisphereSampling(normal);
    else if (samplingType == 1)
        direction = UniformSampling(normal);
    else if (samplingType == 2)
        direction = CosineWeightedSampling(normal);

    directions[id.x] = direction;
}
