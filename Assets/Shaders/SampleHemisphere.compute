// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> directions;

float2 _pixel;
float seed;
bool isCosineSample;
static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

// range: 0~1
float rand()
{
    float result = frac(sin(seed / 100.0f * dot(_pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    seed += 1.0f;
    return result;
}

float2 hash2()
{
    return frac(sin(_pixel) * float2(43758.5453123, 22578.1459123));
}


// Add Monte Carlo integration
float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

// https://zhuanlan.zhihu.com/p/437461225
float3 SampleHemisphere(float3 normal)
{
    //// Uniformly sample hemisphere direction
    //float theta = 2 * PI * rand();
    //float phi = 0.5 * PI * rand(); // semi-sphere

    float theta = 2 * PI * rand();
    float phi = 0.5 * PI * rand(); // semi-sphere

    //theta = 2 * PI * rand();
    //phi = acos(sqrt(1 - rand()));

    float3 localSpaceDir = float3(cos(theta) * sin(phi), sin(theta) * sin(phi), cos(phi));
    // Transform direction to world space
    return mul(localSpaceDir, GetTangentSpace(normal));

    //// Uniformly sample hemisphere direction
    //float cosTheta = rand();
    //float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    //float phi = 2 * PI * rand();
    //float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    //// Transform direction to world space
    //return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 UniformSampleHemisphere(float3 normal)
{
    float2 u = hash2();
    u = float2(rand(), rand());

    float r = sqrt(1 - u.x * u.x);
    float phi = 2.0 * PI * u.y;

    float3  B = normalize(cross(normal, float3(0.0, 0.0, 1.0)));
    float3  T = cross(B, normal);

    return normalize(r * sin(phi) * B + u.x * normal + r * cos(phi) * T);
}

float3 CosineSampleHemisphere(float3 normal)
{
    float2 u = hash2();
    u = float2(rand(), rand());

    float r = sqrt(u.x);
    float theta = 2.0 * PI * u.y;

    float3  B = normalize(cross(normal, float3(0.0, 0.0, 1.0)));
    float3  T = cross(B, normal);

    return normalize(r * sin(theta) * B + sqrt(1.0 - u.x) * normal + r * cos(theta) * T);
}

[numthreads(32, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _pixel = id.xy;
    //_pixel = id.x + id.y * 3.43121412313;

    float3 direction;
    if (isCosineSample)
        direction = CosineSampleHemisphere(float3(0, 1, 0)); 
    else
        direction = UniformSampleHemisphere(float3(0, 1, 0));

    directions[id.x] = direction;
}
