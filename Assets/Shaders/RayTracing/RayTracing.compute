#pragma kernel CSMain

////////////// chapter4_3 //////////////
#pragma multi_compile __ BVH

#include "Header.cginc"
#include "BruteForceRayTracing.cginc"
#include "Shade.cginc"
//////////////// chapter4_3 //////////////
#include "./Assets/Shaders/BVH/BVHTracing.cginc"

////////////// chapter2_1 //////////////
RWTexture2D<float4> destination;
int width;
int height;

//////////////// chapter3_5 //////////////
float4 pixelOffset;

////////////// chapter2_1 //////////////
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    ////////////// chapter5_2 //////////////
    _pixel = id.xy;

    ////////////// chapter2_1 //////////////
    //Ray ray = CreateCameraRay(0);

    ////////////// chapter2_2 //////////////
    // transform pixel from (0, 1) to (-1, 1)
    //float2 uv = float2(id.xy / float2(width, height)) * 2 - 1;

    //////////////// chapter3_5 //////////////
    float2 uv = float2((id.xy + pixelOffset.xy * 2 - 1) / float2(width, height)) * 2 - 1;

    Ray ray = CreateCameraRay(uv);

    float3 col = float3(0, 0, 0);

    for (int i = 0; i < MAX_BOUNCE; i++)
    {
        ////////////// chapter2_1 //////////////
        //RayHit hit = BruteForceRayTrace(ray);
        ////////////// chapter4_3 //////////////
#ifdef BVH
        RayHit hit = BVHTrace(ray);
#else
        RayHit hit = BruteForceRayTrace(ray);
#endif
        //col += Shade(hit, ray);
        // chapter3_1
        col += ray.energy * Shade(hit, ray);

        if (!any(ray.energy))   // any(x): x!=0 return true
            break;
    }

    destination[id.xy] = float4(col, 1);
}
