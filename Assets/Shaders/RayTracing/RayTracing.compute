#pragma kernel CSMain
//////////////// chapter7_2 //////////////
#pragma kernel ShadowMap

//////////////// chapter4_7 //////////////
#pragma multi_compile __ BVH

////////////// chapter5_4 //////////////
#pragma multi_compile __ NO_SHADOW
#pragma multi_compile __ HARD_SHADOW
#pragma multi_compile __ SOFT_SHADOW

//////////////// chapter6_2 //////////////
#pragma multi_compile __ UNIFORM_SAMPLING
#pragma multi_compile __ COSINE_SAMPLING
#pragma multi_compile __ LIGHT_IMPORTANCE_SAMPLING
#pragma multi_compile __ BSDF_IMPORTANCE_SAMPLING
#pragma multi_compile __ MULTIPLE_IMPORTANCE_SAMPLING

#pragma multi_compile __ SPHERE_LIGHT
#pragma multi_compile __ AREA_LIGHT
#pragma multi_compile __ DISC_LIGHT

//////////////// chapter7_6 //////////////
#pragma multi_compile __ DEPTH_OF_FIELD

////////////// chapter2_1 //////////////
#include "Header.cginc"
#include "BruteForceRayTracing.cginc"
#include "Shade.cginc"
//////////////// chapter4_7 //////////////
#include "./Assets/Shaders/BVH/BVHRayTracing.cginc"
////////////// chapter5_4 //////////////
#include "Shadow.cginc"

////////////// chapter2_1 //////////////
RWTexture2D<float4> destination;
int width;
int height;

//////////////// chapter3_5 //////////////
float4 pixelOffset;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    ////////////// chapter5_2 //////////////
    _pixel = id.xy;

    ////////////// chapter6_4 //////////////
    SetSeed();

    ////////////// chapter2_2 //////////////
    // uv 空间定义在 (-1,1)
    //float2 uv = float2(id.xy / float2(width, height)) * 2 - 1;
    //////////////// chapter3_5 //////////////
    //float2 uv = float2((id.xy + pixelOffset.xy - 0.5) / float2(width, height)) * 2 - 1;
    float2 uv = float2((id.xy + float2(Rand(), Rand()) - 0.5) / float2(width, height)) * 2 - 1;

    //////////////// chapter7_6 //////////////
//#ifdef DEPTH_OF_FIELD
//    Ray ray = CreateDoFCameraRay(uv);
//#else
    Ray ray = CreateCameraRay(uv);
//#endif

    ////////////// chapter2_2 //////////////
    // 主要的光线追踪反弹循环
    float3 col = float3(0, 0, 0);
    for (int i = 0; i < MAX_BOUNCE; i++)
    {
        //////////////// chapter4_7 //////////////
#ifdef BVH
        RayHit hit = BVHRayTrace(ray);
#else
        RayHit hit = BruteForceRayTrace(ray);
#endif
        //////////////// chapter5_4 //////////////
        ////float3 shadow = HardShadow(hit.position + hit.normal * NORMAL_BIAS, -lightParameter.xyz);
        //float3 shadow = SoftShadow(hit.position + hit.normal * NORMAL_BIAS, -lightParameter.xyz);
        //ray.energy *= shadow;

        col += ray.energy * Shade(hit, /*inout*/ ray);

        // 当光能损失完后，该条光线追踪结束
        if (!any(ray.energy))   // any(x): x!=0 return true
            break;
    }

    destination[id.xy] = float4(col, 0.0);
}

//////////////// chapter7_2 //////////////
RWTexture2D<float4> shadowMap;

[numthreads(8,8,1)]
void ShadowMap (uint3 id : SV_DispatchThreadID)
{
    _pixel = id.xy;

    SetSeed();

    float2 uv = float2((id.xy + float2(Rand(), Rand()) - 0.5) / float2(width, height)) * 2 - 1;

    //////////////// chapter7_6 //////////////
#ifdef DEPTH_OF_FIELD
    Ray ray = CreateDoFCameraRay(uv);
#else
    Ray ray = CreateCameraRay(uv);
#endif

    RayHit hit = BVHRayTrace(ray);

    if (hit.distance < 1.#INF)
    {
        float3 shadow = SoftShadow(hit.position + hit.normal * NORMAL_BIAS, -lightParameter.xyz, lightParameter.w);
        
        //////////////// chapter7_3 //////////////
        //shadowMap[id.xy] = float4(shadow, 1);
        if (hit.materialType == 4)
		    shadowMap[id.xy] = float4(shadow, 0);
        else
            shadowMap[id.xy] = float4(shadow, 1);
    }
    else
    {
        //////////////// chapter7_3 //////////////
        //shadowMap[id.xy] = 1;
        shadowMap[id.xy] = float4(1, 1, 1, 0);
    }
}

